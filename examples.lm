// This is a comment
//
// *****************
//  Test module
// *****************

// Define print line abstraction
let println = lambda x : Top. print x; print "\n";;

// Print and basic types print test
println "** Testing print";;
print "This is a Nat: "; println 0;;
print "This is a Str: "; println "Hello world";;
print "This is a Bool: "; println true;;
print "This is a Float: "; println 1.2;;
println "";;

println "** Testing aliases";;
alias U : Unit;;
println "Now U is an alias of Unit";;

alias NN : Nat->Nat;;
println "Now NN is an alias of Nat->Nat";;

let uid = lambda x : U. x;;
let nnid = lambda x : NN. x;;

println "Examples: ";;
print " (lambda x : U. x): "; println uid;;
print " (lambda x : NN. x): "; println nnid;;
println "";;

println "** Testing naturals";;
print "The successor of 0 is: "; println succ 0;;
print "The predecessor of 1 is: "; println pred 1;;
print "Is zero 0?: "; println iszero 0;;
print "Is zero 1?: "; println iszero 1;;
println "";;


println "** Testing booleans";;
print "If false then true else false: "; println (if false then true else false);;
println "";;


println "** Testing identifiers";;
println "Defining nat_id as nat->nat: ";;
let nat_id = lambda x : Nat. x;;
print "nat_id: "; println nat_id;;
println "";;


println "** Testing ascriptions";;
print "Ascription of Nat: "; println (0 as Nat);;
println "";;


println "** Testing abstractions";;
println (lambda x : Nat->(Nat->Nat). lambda y : Nat->Nat. x 0);;
println "";;


println "** Testing applications";;
print "(lambda x : Nat. succ x) 5: "; println ((lambda x : Nat. succ x) 5);;
println "";;


println "** Testing conditionals";;
println ((lambda x:Nat. if iszero(x) then "Value is zero" else "Value is not zero") 3);;
println ((lambda x:Nat. if iszero(x) then "Value is zero" else "Value is not zero") 0);;
println "";;


println "** Testing registers";;
println ({a:2,b:true,c:2.0});;
let {a:r1,b:r2} = {a:2,b:1.512};;
print "r1: "; println (r1);;
print "r2: "; println (r2);;
println (let {a:r1,b:r2} = {a:2,b:1.512} in succ r1);;
println (lambda x:{a:Nat,b:Bool,c:Float,d:Str}. x.a);;
println "";;


println "** Testing tuples";;
println {2,true,"hellow"};;
let {a,b} = {0, "hellow"};;
print "a: "; println (a);;
print "b: "; println (b);;
let tuple = {true, 4};;
print "tuple_0: "; println tuple.0;;
print "tuple_1: "; println tuple.1;;
println (let {a,b} = {true,4} in pred b);;
println (lambda x:{Nat,Float,Str}. x);;
println "";;

println "** Testing list";;
print "This is a list: "; println Nat[1,2,3,4,5];;
print "This is a empty list: "; println Nat[];;
println "List pattern matching: let h::t = [1,2,3,4,5];;";; let h::t = [1,2,3,4,5];;
print "List head: "; println h;;
print "List tail: "; println t;;
print "This is a list: "; println [1,2,3];;
println "let l = [1, 2, 3];;";; let l = [1,2,3];;
print "1::l: ";; println 1::l;;
print "1::2::3::l: ";; println 1::2::3::l;;
print "1::2::Nat[]: ";; println 1::2::Nat[];;
"hello "::"new"::" world"::Str[];;
println (let h::t = [1,2,3,4] in h);;
println (lambda x : [Nat]. x);;

let head = lambda l : [Nat]. let h::t = l in h;;
let tail = lambda l : [Nat]. let h::t = l in t;;
println "";;

println "** Testing fix";;
let sumaux = lambda f:Nat->Nat->Nat. lambda n:Nat. lambda m:Nat. if iszero n then m else succ ((f (pred n)) m) in
(let sum = fix sumaux in (sum 21) 34);;


let sumaux = lambda f:Nat->Nat->Nat. lambda n:Nat. lambda m:Nat. if iszero n then m else succ ((f (pred n)) m);;
print "sumaux: "; println sumaux;;

let sum = fix sumaux;;
print "fix sumaux: "; println sum;;



let ff = lambda ieio:{iseven:Nat->Bool, isodd:Nat->Bool}.
{iseven : (lambda x:Nat. if iszero x then true else (ieio.isodd (pred x))),
isodd : (lambda x:Nat. if iszero x then false else (ieio.iseven (pred x)))};;
let r = fix ff;;
let iseven = r.iseven;;
iseven 7;;
iseven 4;;
println "";;


println "** Testing letrec";;
letrec sum : (Nat->Nat->Nat). lambda n : Nat. lambda m : Nat. if iszero n then m else succ ((sum (pred n)) m) in (sum 10) 11;;
let nlength = letrec len : Nat->[Nat]->Nat. lambda c : Nat. lambda l : [Nat]. if isempty l then c else ((len (succ c)) (let h::t = l in t)) in len 0;;
println "";;


head [1, 2, 3];;
tail [1, 2, 3];;
head Nat[1, 2, 3];;
tail Nat[1, 2, 3];;
