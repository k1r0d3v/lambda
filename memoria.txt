//
// Alejandro Romero Rivera (2019)
//


Esta pr치ctica se ha desarrollado en el leguaje de programaci칩n C++ y consiste en el desarrollo de un interprete de un subconjunto de lambda calculo,
el interprete soporta lambda calculo con tipado simple y soporta algunas de las operaciones comunes en el lenguaje:

    - Naturales
    - Strings
    - Floats
    - Bools
    - Units
    - Listas y concatenacion de estas
    - Tuplas y acceso mediante indices
    - Registros y acceso mediante etiqueta
    - Condiciones if-then-else
    - Simple pattern-matching
    - Recursividad
    - Alias
    - Ascripciones


Algunas limitaciones de esta pr치ctica a tener en cuenta son:
    - Cada linea del terminal lee hasta que encuentra un salto de linea,
      esta limitacion viene dada por el interprete no por el parser ni el lexer.
      Sin embargo se pueden leer ficheros externos con codigo mediante la operacion: 
        * #open ruta_del_archivo;;

    - Las aplicaciones (por ejemplo: id 1) no soportan el estilo currificado,
      esto significa que solo podemos aplicar un termino a la vez, 
      para usar mas terminos necesitamos usar parentesis.
        * Por ejemplo (mal): id2 1 2 3
        * Por ejemplo (bien): (((id2 1) 2) 3)
      Esta limitacion viene impuesta por el parser y se ha decidido 
      no soportar esta funcionalidad con el fin de evitar problemas de shift/reduce

La estructura del proyecto es la siguiente:
- include
  Encabezados de c++

- source
  Codigo fuente de c++ junto con el lexer y parser

- CMakeLists.txt
  Archivo de cmake para compilar el proyecto

- examples.lm
  Algunos ejemplos de las posibilidades que aporta este interprete

Desde el punto de vista de este proyecto (Bison y Flex) los archivos m치s importantes son:
- include/driver.hpp
  Esta clase proporciona una comunicacion con el codigo y el parser/lexer

- source/parser.y
  Archivo con las reglas de la gramatica (Bison)

- source/lexer.l
  Archivo con las reglas de los tokens (Flex)

- source/driver.cpp
  Implementacion del driver

La compilacion de esta practica puede realizarse de la siguente forma:

$ mkdir build
$ cd build
$ cmake ..
$ make

Una vez se han procesado los anteriores comandos, el interprete se puede ejecutar
de la siguente forma:

$ ./lambda

A continuacion se muestran algunos ejemplos de comandos:

$ ./lambda
In [1]: #open ../examples.lm;;

