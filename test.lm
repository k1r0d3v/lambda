let println = lambda x : Top. print x; print "\n";;

println "*****************";;
println "*  Test module  *";;
println "*****************";;
println "";;

println "** Testing print";;
print "This is a Nat: "; println 0;;
print "This is a Str: "; println "Hello world";;
print "This is a Bool: "; println true;;
println "";;

println "** Testing aliases";;
alias U : Unit;;
alias NN : Nat->Nat;;

println "Now U is an alias of Unit";;
println "Now NN is an alias of Nat->Nat";;
let uid = lambda x : U. x;;
let nnid = lambda x : NN. x;;
println "Examples: ";;
print " "; println uid;;
print " "; println nnid;;
println "";;

println "** Testing naturals";;
print "The successor of 0 is: "; println succ 0;;
print "The predecessor of 1 is: "; println pred 1;;
print "Is zero 0?: "; println iszero 0;;
print "Is zero 1?: "; println iszero 1;;
println "";;


println "** Testing booleans";;
print "If false then true else false: "; println (if false then true else false);;
println "";;


println "** Testing identifiers";;
println "Defining nat_id as nat->nat: ";;
let nat_id = lambda x : Nat. x;;
print "nat_id: "; println nat_id;;
println "";;


println "** Testing ascriptions";;
print "Ascription of Nat: "; println 0 as Nat;;
println "";;


println "** Testing abstractions";;
println (lambda x : Nat->(Nat->Nat). lambda y : Nat->Nat. x 0);;
println "";;


println "** Testing applications";;
(lambda x : Nat. succ(x)) 5;;
println "";;


println "** Testing conditionals";;
println ((lambda x:Nat. if iszero(x) then "El valor es 0" else "El valor No es 0")3);;
println ((lambda x:Nat. if iszero(x) then "El valor es 0" else "El valor No es 0")0);;
println "";;


println "** Testing registers";;
println ({a:2,b:true,c:2.0});;
let {a:r1,b:r2} = {a:2,b:1.512};;
print "r1: "; println (r1);;
print "r2: "; println (r2);;
println (let {a:r1,b:r2} = {a:2,b:1.512} in succ(r1));;
println (lambda x:{a:Nat,b:Bool,c:Float,d:Str}. (x.a));;
println "";;


println "** Testing tuples";;
println ({2,true,"hellow"});;
let {a,b} = {0,"hellow"};;
print "a: "; println (a);;
print "b: "; println (b);;
println (let tuple = {true,4});;
print "tuple_0: " prinln(tuple.0);;
print "tuple_1: " prinln(tuple.1);;
println (let {a,b} = {true,4} in pred(b));;
println (lambda y:Nat. lambda x:{Nat,Float,Str}. (x.y));;
println "";;

println "** Testing list";;
println "";;

println "** Testing fix";;
println "";;


println "** Testing letrec";;
println "";;
